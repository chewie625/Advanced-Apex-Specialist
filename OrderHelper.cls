public class OrderHelper {

    /**
     * @name AfterUpdate
     * @description 
     * @param List<Order> newList
     * @param List<Order> oldList
     * @return void
    **/
    public static void AfterUpdate(List<Order> newList, List<Order> oldList){
        Set<Id> orderIds = new Set<Id>();
        for ( Integer i=0; i<newList.size(); i++ ){
            if ( newList[i].Status == constants.ACTIVATED_ORDER_STATUS && oldList[i].Status != constants.ACTIVATED_ORDER_STATUS ){
                orderIds.add(newList[i].Id);
            }
        }
        RollUpOrderItems(orderIds);
    }

    /**
     * @name RollUpOrderItems
     * @description Given a set of Activated Order ids, query the child Order Items and related Products to calculate Inventory levels
     * @param Set<Id> activatedOrderIds
     * @return void
    **/
    public static void RollUpOrderItems(Set<Id> activatedOrderIds){
        //ToDo: Declare a Map named "productMap" of Ids to Product2 records
        map<id, Product2> productMap = new map<id, Product2>();

        //ToDo: Loop through a query of OrderItems related to the activatedOrderIds
        list<OrderItem> orderItemList = [SELECT OrderId, Product2Id, Quantity FROM OrderItem WHERE OrderId =: activatedOrderIds];

            //ToDo: Populate the map with the Id of the related Product2 as the key and Product2 record as the value
        for(OrderItem oI :orderItemList){
            productMap.put(oI.Product2Id, [SELECT Name,Quantity_Ordered__c FROM Product2 WHERE Id =:oI.Product2Id]);
        }

        //ToDo: Loop through a query that aggregates the OrderItems related to the Products in the ProductMap keyset
        Set<id> targetProduct2Ids = productMap.keySet();
        AggregateResult[] sumQty = [SELECT Product2Id, SUM(Quantity)sum FROM OrderItem  WHERE Product2Id IN :targetProduct2Ids GROUP BY Product2Id];  
        for (AggregateResult ar : sumQty)  {
            id targetProductId = (id)ar.get('Product2Id');
            Decimal quantityOrder = (Decimal)ar.get('sum');
            System.debug('Product ID: ' + targetProductId);
            System.debug('Sum Quantity: '+ quantityOrder);
            if (productMap.containsKey(targetProductId)){
                Product2 targetProductRecord = productMap.get(targetProductId);
                targetProductRecord.Quantity_Ordered__c = quantityOrder;
                
            }
        }

        //ToDo: Perform an update on the records in the productMap
        update productMap.values();
    }

}